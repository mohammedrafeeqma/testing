{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar v = require('./service-helpers/validator');\n\nvar pick = require('./service-helpers/pick');\n\nvar stringifyBooleans = require('./service-helpers/stringify-booleans');\n\nvar createServiceFactory = require('./service-helpers/create-service-factory');\n/**\n * Geocoding API service.\n *\n * Learn more about this service and its responses in\n * [the HTTP service documentation](https://docs.mapbox.com/api/search/#geocoding).\n */\n\n\nvar Geocoding = {};\nvar featureTypes = ['country', 'region', 'postcode', 'district', 'place', 'locality', 'neighborhood', 'address', 'poi', 'poi.landmark'];\n/**\n * Search for a place.\n *\n * See the [public documentation](https://docs.mapbox.com/api/search/#forward-geocoding).\n *\n * @param {Object} config\n * @param {string} config.query - A place name.\n * @param {'mapbox.places'|'mapbox.places-permanent'} [config.mode=\"mapbox.places\"] - Either `mapbox.places` for ephemeral geocoding, or `mapbox.places-permanent` for storing results and batch geocoding.\n * @param {Array<string>} [config.countries] - Limits results to the specified countries.\n *   Each item in the array should be an [ISO 3166 alpha 2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n * @param {Coordinates|'ip'} [config.proximity] - Bias local results based on a provided coordinate location or a user's IP address.\n * @param {Array<'country'|'region'|'postcode'|'district'|'place'|'locality'|'neighborhood'|'address'|'poi'|'poi.landmark'>} [config.types] - Filter results by feature types.\n * @param {boolean} [config.autocomplete=true] - Return autocomplete results or not.\n * @param {BoundingBox} [config.bbox] - Limit results to a bounding box.\n * @param {number} [config.limit=5] - Limit the number of results returned.\n * @param {Array<string>} [config.language] - Specify the language to use for response text and, for forward geocoding, query result weighting.\n *  Options are [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag) comprised of a mandatory\n *  [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) and optionally one or more IETF subtags for country or script.\n * @param {boolean} [config.routing=false] - Specify whether to request additional metadata about the recommended navigation destination. Only applicable for address features.\n * @param {boolean} [config.fuzzyMatch=true] - Specify whether the Geocoding API should attempt approximate, as well as exact, matching.\n * @param {String} [config.worldview=\"us\"] - Filter results to geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups.\n * @return {MapiRequest}\n *\n * @example\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   limit: 2\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * @example\n * // geocoding with proximity\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   proximity: [-95.4431142, 33.6875431]\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * // geocoding with countries\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   countries: ['fr']\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * // geocoding with bounding box\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   bbox: [2.14, 48.72, 2.55, 48.96]\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n */\n\nGeocoding.forwardGeocode = function (config) {\n  v.assertShape({\n    query: v.required(v.string),\n    mode: v.oneOf('mapbox.places', 'mapbox.places-permanent'),\n    countries: v.arrayOf(v.string),\n    proximity: v.oneOf(v.coordinates, 'ip'),\n    types: v.arrayOf(v.oneOf(featureTypes)),\n    autocomplete: v.boolean,\n    bbox: v.arrayOf(v.number),\n    limit: v.number,\n    language: v.arrayOf(v.string),\n    routing: v.boolean,\n    fuzzyMatch: v.boolean,\n    worldview: v.string\n  })(config);\n  config.mode = config.mode || 'mapbox.places';\n  var query = stringifyBooleans(xtend({\n    country: config.countries\n  }, pick(config, ['proximity', 'types', 'autocomplete', 'bbox', 'limit', 'language', 'routing', 'fuzzyMatch', 'worldview'])));\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/geocoding/v5/:mode/:query.json',\n    params: pick(config, ['mode', 'query']),\n    query: query\n  });\n};\n/**\n * Search for places near coordinates.\n *\n * See the [public documentation](https://docs.mapbox.com/api/search/#reverse-geocoding).\n *\n * @param {Object} config\n * @param {Coordinates} config.query - Coordinates at which features will be searched.\n * @param {'mapbox.places'|'mapbox.places-permanent'} [config.mode=\"mapbox.places\"] - Either `mapbox.places` for ephemeral geocoding, or `mapbox.places-permanent` for storing results and batch geocoding.\n * @param {Array<string>} [config.countries] - Limits results to the specified countries.\n *   Each item in the array should be an [ISO 3166 alpha 2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n * @param {Array<'country'|'region'|'postcode'|'district'|'place'|'locality'|'neighborhood'|'address'|'poi'|'poi.landmark'>} [config.types] - Filter results by feature types.\n * @param {BoundingBox} [config.bbox] - Limit results to a bounding box.\n * @param {number} [config.limit=1] - Limit the number of results returned. If using this option, you must provide a single item for `types`.\n * @param {Array<string>} [config.language] - Specify the language to use for response text and, for forward geocoding, query result weighting.\n *  Options are [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag) comprised of a mandatory\n *  [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) and optionally one or more IETF subtags for country or script.\n * @param {'distance'|'score'} [config.reverseMode='distance'] - Set the factors that are used to sort nearby results.\n * @param {boolean} [config.routing=false] - Specify whether to request additional metadata about the recommended navigation destination. Only applicable for address features.\n * @param {String} [config.worldview=\"us\"] - Filter results to geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups.\n * @return {MapiRequest}\n *\n * @example\n * geocodingClient.reverseGeocode({\n *   query: [-95.4431142, 33.6875431]\n * })\n *   .send()\n *   .then(response => {\n *     // GeoJSON document with geocoding matches\n *     const match = response.body;\n *   });\n */\n\n\nGeocoding.reverseGeocode = function (config) {\n  v.assertShape({\n    query: v.required(v.coordinates),\n    mode: v.oneOf('mapbox.places', 'mapbox.places-permanent'),\n    countries: v.arrayOf(v.string),\n    types: v.arrayOf(v.oneOf(featureTypes)),\n    bbox: v.arrayOf(v.number),\n    limit: v.number,\n    language: v.arrayOf(v.string),\n    reverseMode: v.oneOf('distance', 'score'),\n    routing: v.boolean,\n    worldview: v.string\n  })(config);\n  config.mode = config.mode || 'mapbox.places';\n  var query = stringifyBooleans(xtend({\n    country: config.countries\n  }, pick(config, ['country', 'types', 'bbox', 'limit', 'language', 'reverseMode', 'routing', 'worldview'])));\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/geocoding/v5/:mode/:query.json',\n    params: pick(config, ['mode', 'query']),\n    query: query\n  });\n};\n\nmodule.exports = createServiceFactory(Geocoding);","map":{"version":3,"sources":["C:/Users/mohammed rafeeque/Desktop/sample/frontend/node_modules/@mapbox/mapbox-sdk/services/geocoding.js"],"names":["xtend","require","v","pick","stringifyBooleans","createServiceFactory","Geocoding","featureTypes","forwardGeocode","config","assertShape","query","required","string","mode","oneOf","countries","arrayOf","proximity","coordinates","types","autocomplete","boolean","bbox","number","limit","language","routing","fuzzyMatch","worldview","country","client","createRequest","method","path","params","reverseGeocode","reverseMode","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\nvar v = require('./service-helpers/validator');\nvar pick = require('./service-helpers/pick');\nvar stringifyBooleans = require('./service-helpers/stringify-booleans');\nvar createServiceFactory = require('./service-helpers/create-service-factory');\n\n/**\n * Geocoding API service.\n *\n * Learn more about this service and its responses in\n * [the HTTP service documentation](https://docs.mapbox.com/api/search/#geocoding).\n */\nvar Geocoding = {};\n\nvar featureTypes = [\n  'country',\n  'region',\n  'postcode',\n  'district',\n  'place',\n  'locality',\n  'neighborhood',\n  'address',\n  'poi',\n  'poi.landmark'\n];\n\n/**\n * Search for a place.\n *\n * See the [public documentation](https://docs.mapbox.com/api/search/#forward-geocoding).\n *\n * @param {Object} config\n * @param {string} config.query - A place name.\n * @param {'mapbox.places'|'mapbox.places-permanent'} [config.mode=\"mapbox.places\"] - Either `mapbox.places` for ephemeral geocoding, or `mapbox.places-permanent` for storing results and batch geocoding.\n * @param {Array<string>} [config.countries] - Limits results to the specified countries.\n *   Each item in the array should be an [ISO 3166 alpha 2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n * @param {Coordinates|'ip'} [config.proximity] - Bias local results based on a provided coordinate location or a user's IP address.\n * @param {Array<'country'|'region'|'postcode'|'district'|'place'|'locality'|'neighborhood'|'address'|'poi'|'poi.landmark'>} [config.types] - Filter results by feature types.\n * @param {boolean} [config.autocomplete=true] - Return autocomplete results or not.\n * @param {BoundingBox} [config.bbox] - Limit results to a bounding box.\n * @param {number} [config.limit=5] - Limit the number of results returned.\n * @param {Array<string>} [config.language] - Specify the language to use for response text and, for forward geocoding, query result weighting.\n *  Options are [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag) comprised of a mandatory\n *  [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) and optionally one or more IETF subtags for country or script.\n * @param {boolean} [config.routing=false] - Specify whether to request additional metadata about the recommended navigation destination. Only applicable for address features.\n * @param {boolean} [config.fuzzyMatch=true] - Specify whether the Geocoding API should attempt approximate, as well as exact, matching.\n * @param {String} [config.worldview=\"us\"] - Filter results to geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups.\n * @return {MapiRequest}\n *\n * @example\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   limit: 2\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * @example\n * // geocoding with proximity\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   proximity: [-95.4431142, 33.6875431]\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * // geocoding with countries\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   countries: ['fr']\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n *\n * // geocoding with bounding box\n * geocodingClient.forwardGeocode({\n *   query: 'Paris, France',\n *   bbox: [2.14, 48.72, 2.55, 48.96]\n * })\n *   .send()\n *   .then(response => {\n *     const match = response.body;\n *   });\n */\nGeocoding.forwardGeocode = function(config) {\n  v.assertShape({\n    query: v.required(v.string),\n    mode: v.oneOf('mapbox.places', 'mapbox.places-permanent'),\n    countries: v.arrayOf(v.string),\n    proximity: v.oneOf(v.coordinates, 'ip'),\n    types: v.arrayOf(v.oneOf(featureTypes)),\n    autocomplete: v.boolean,\n    bbox: v.arrayOf(v.number),\n    limit: v.number,\n    language: v.arrayOf(v.string),\n    routing: v.boolean,\n    fuzzyMatch: v.boolean,\n    worldview: v.string\n  })(config);\n\n  config.mode = config.mode || 'mapbox.places';\n\n  var query = stringifyBooleans(\n    xtend(\n      { country: config.countries },\n      pick(config, [\n        'proximity',\n        'types',\n        'autocomplete',\n        'bbox',\n        'limit',\n        'language',\n        'routing',\n        'fuzzyMatch',\n        'worldview'\n      ])\n    )\n  );\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/geocoding/v5/:mode/:query.json',\n    params: pick(config, ['mode', 'query']),\n    query: query\n  });\n};\n\n/**\n * Search for places near coordinates.\n *\n * See the [public documentation](https://docs.mapbox.com/api/search/#reverse-geocoding).\n *\n * @param {Object} config\n * @param {Coordinates} config.query - Coordinates at which features will be searched.\n * @param {'mapbox.places'|'mapbox.places-permanent'} [config.mode=\"mapbox.places\"] - Either `mapbox.places` for ephemeral geocoding, or `mapbox.places-permanent` for storing results and batch geocoding.\n * @param {Array<string>} [config.countries] - Limits results to the specified countries.\n *   Each item in the array should be an [ISO 3166 alpha 2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n * @param {Array<'country'|'region'|'postcode'|'district'|'place'|'locality'|'neighborhood'|'address'|'poi'|'poi.landmark'>} [config.types] - Filter results by feature types.\n * @param {BoundingBox} [config.bbox] - Limit results to a bounding box.\n * @param {number} [config.limit=1] - Limit the number of results returned. If using this option, you must provide a single item for `types`.\n * @param {Array<string>} [config.language] - Specify the language to use for response text and, for forward geocoding, query result weighting.\n *  Options are [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag) comprised of a mandatory\n *  [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) and optionally one or more IETF subtags for country or script.\n * @param {'distance'|'score'} [config.reverseMode='distance'] - Set the factors that are used to sort nearby results.\n * @param {boolean} [config.routing=false] - Specify whether to request additional metadata about the recommended navigation destination. Only applicable for address features.\n * @param {String} [config.worldview=\"us\"] - Filter results to geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups.\n * @return {MapiRequest}\n *\n * @example\n * geocodingClient.reverseGeocode({\n *   query: [-95.4431142, 33.6875431]\n * })\n *   .send()\n *   .then(response => {\n *     // GeoJSON document with geocoding matches\n *     const match = response.body;\n *   });\n */\nGeocoding.reverseGeocode = function(config) {\n  v.assertShape({\n    query: v.required(v.coordinates),\n    mode: v.oneOf('mapbox.places', 'mapbox.places-permanent'),\n    countries: v.arrayOf(v.string),\n    types: v.arrayOf(v.oneOf(featureTypes)),\n    bbox: v.arrayOf(v.number),\n    limit: v.number,\n    language: v.arrayOf(v.string),\n    reverseMode: v.oneOf('distance', 'score'),\n    routing: v.boolean,\n    worldview: v.string\n  })(config);\n\n  config.mode = config.mode || 'mapbox.places';\n\n  var query = stringifyBooleans(\n    xtend(\n      { country: config.countries },\n      pick(config, [\n        'country',\n        'types',\n        'bbox',\n        'limit',\n        'language',\n        'reverseMode',\n        'routing',\n        'worldview'\n      ])\n    )\n  );\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/geocoding/v5/:mode/:query.json',\n    params: pick(config, ['mode', 'query']),\n    query: query\n  });\n};\n\nmodule.exports = createServiceFactory(Geocoding);\n"]},"metadata":{},"sourceType":"script"}