{"ast":null,"code":"/**\n * This function transforms the feature from reverse geocoding to plain text with specified accuracy\n * @param {object} feature \n * @param {string} accuracy \n * @returns \n */\nfunction transformFeatureToGeolocationText(feature, accuracy) {\n  var addrInfo = getAddressInfo(feature);\n  var addressAccuracy = ['address', 'street', 'place', 'country'];\n  var currentAccuracy;\n\n  if (typeof accuracy === 'function') {\n    return accuracy(addrInfo);\n  }\n\n  var accuracyIndex = addressAccuracy.indexOf(accuracy);\n\n  if (accuracyIndex === -1) {\n    currentAccuracy = addressAccuracy;\n  } else {\n    currentAccuracy = addressAccuracy.slice(accuracyIndex);\n  }\n\n  return currentAccuracy.reduce(function (acc, name) {\n    if (!addrInfo[name]) {\n      return acc;\n    }\n\n    if (acc !== '') {\n      acc = acc + ', ';\n    }\n\n    return acc + addrInfo[name];\n  }, '');\n}\n/**\n * This function transforms the feature from reverse geocoding to AddressInfo object\n * @param {object} feature \n * @returns {object}\n */\n\n\nfunction getAddressInfo(feature) {\n  var houseNumber = feature.address || '';\n  var street = feature.text || '';\n  var placeName = feature.place_name || '';\n  var address = placeName.split(',')[0];\n  var addrInfo = {\n    address: address,\n    houseNumber: houseNumber,\n    street: street,\n    placeName: placeName\n  };\n  feature.context.forEach(function (context) {\n    var layer = context.id.split('.')[0];\n    addrInfo[layer] = context.text;\n  });\n  return addrInfo;\n}\n\nmodule.exports = {\n  transformFeatureToGeolocationText: transformFeatureToGeolocationText,\n  getAddressInfo: getAddressInfo\n};","map":{"version":3,"sources":["C:/Users/mohammed rafeeque/Desktop/sample/frontend/node_modules/@mapbox/mapbox-gl-geocoder/lib/utils.js"],"names":["transformFeatureToGeolocationText","feature","accuracy","addrInfo","getAddressInfo","addressAccuracy","currentAccuracy","accuracyIndex","indexOf","slice","reduce","acc","name","houseNumber","address","street","text","placeName","place_name","split","context","forEach","layer","id","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iCAAT,CAA2CC,OAA3C,EAAoDC,QAApD,EAA8D;AAC5D,MAAMC,QAAQ,GAAGC,cAAc,CAACH,OAAD,CAA/B;AAEA,MAAMI,eAAe,GAAI,CAAC,SAAD,EAAY,QAAZ,EAAsB,OAAtB,EAA+B,SAA/B,CAAzB;AACA,MAAIC,eAAJ;;AAEA,MAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOA,QAAQ,CAACC,QAAD,CAAf;AACD;;AAED,MAAMI,aAAa,GAAGF,eAAe,CAACG,OAAhB,CAAwBN,QAAxB,CAAtB;;AAEA,MAAIK,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBD,IAAAA,eAAe,GAAGD,eAAlB;AACD,GAFD,MAEO;AACLC,IAAAA,eAAe,GAAGD,eAAe,CAACI,KAAhB,CAAsBF,aAAtB,CAAlB;AACD;;AAED,SAAOD,eAAe,CAACI,MAAhB,CAAuB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAChD,QAAI,CAACT,QAAQ,CAACS,IAAD,CAAb,EAAqB;AACnB,aAAOD,GAAP;AACD;;AAED,QAAIA,GAAG,KAAK,EAAZ,EAAgB;AACdA,MAAAA,GAAG,GAAGA,GAAG,GAAG,IAAZ;AACD;;AAED,WAAOA,GAAG,GAAGR,QAAQ,CAACS,IAAD,CAArB;AACD,GAVM,EAUJ,EAVI,CAAP;AAWD;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASR,cAAT,CAAwBH,OAAxB,EAAiC;AAC/B,MAAMY,WAAW,GAAGZ,OAAO,CAACa,OAAR,IAAmB,EAAvC;AACA,MAAMC,MAAM,GAAGd,OAAO,CAACe,IAAR,IAAgB,EAA/B;AACA,MAAMC,SAAS,GAAGhB,OAAO,CAACiB,UAAR,IAAsB,EAAxC;AACA,MAAMJ,OAAO,GAAGG,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAhB;AAEA,MAAMhB,QAAQ,GAAG;AACfW,IAAAA,OAAO,EAAEA,OADM;AAEfD,IAAAA,WAAW,EAAEA,WAFE;AAGfE,IAAAA,MAAM,EAAEA,MAHO;AAIfE,IAAAA,SAAS,EAAEA;AAJI,GAAjB;AAOAhB,EAAAA,OAAO,CAACmB,OAAR,CAAgBC,OAAhB,CAAwB,UAAUD,OAAV,EAAmB;AACzC,QAAME,KAAK,GAAGF,OAAO,CAACG,EAAR,CAAWJ,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAd;AACAhB,IAAAA,QAAQ,CAACmB,KAAD,CAAR,GAAkBF,OAAO,CAACJ,IAA1B;AACD,GAHD;AAKA,SAAOb,QAAP;AACD;;AAEDqB,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,iCAAiC,EAAEA,iCADpB;AAEfI,EAAAA,cAAc,EAAEA;AAFD,CAAjB","sourcesContent":["/**\n * This function transforms the feature from reverse geocoding to plain text with specified accuracy\n * @param {object} feature \n * @param {string} accuracy \n * @returns \n */\nfunction transformFeatureToGeolocationText(feature, accuracy) {\n  const addrInfo = getAddressInfo(feature);\n\n  const addressAccuracy =  ['address', 'street', 'place', 'country'];\n  var currentAccuracy;\n\n  if (typeof accuracy === 'function') {\n    return accuracy(addrInfo)\n  }\n\n  const accuracyIndex = addressAccuracy.indexOf(accuracy);\n\n  if (accuracyIndex === -1) {\n    currentAccuracy = addressAccuracy;\n  } else {\n    currentAccuracy = addressAccuracy.slice(accuracyIndex);\n  }\n\n  return currentAccuracy.reduce(function(acc, name) {\n    if (!addrInfo[name]) {\n      return acc;\n    }\n\n    if (acc !== '') {\n      acc = acc + ', ';\n    }\n\n    return acc + addrInfo[name];\n  }, '');\n}\n/**\n * This function transforms the feature from reverse geocoding to AddressInfo object\n * @param {object} feature \n * @returns {object}\n */\nfunction getAddressInfo(feature) {\n  const houseNumber = feature.address || '';\n  const street = feature.text || '';\n  const placeName = feature.place_name || '';\n  const address = placeName.split(',')[0];\n\n  const addrInfo = {\n    address: address,\n    houseNumber: houseNumber,\n    street: street,\n    placeName: placeName,\n  }\n\n  feature.context.forEach(function (context) {\n    const layer = context.id.split('.')[0];\n    addrInfo[layer] = context.text;\n  });\n\n  return addrInfo;\n}\n\nmodule.exports = {\n  transformFeatureToGeolocationText: transformFeatureToGeolocationText,\n  getAddressInfo: getAddressInfo,\n}"]},"metadata":{},"sourceType":"script"}