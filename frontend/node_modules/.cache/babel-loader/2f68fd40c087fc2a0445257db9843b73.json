{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from '../../utils/time-utils';\nimport { useValidation } from './useValidation';\nexport var validateTime = function validateTime(utils, value, _ref) {\n  var minTime = _ref.minTime,\n      maxTime = _ref.maxTime,\n      shouldDisableTime = _ref.shouldDisableTime,\n      disableIgnoringDatePartForTimeValidation = _ref.disableIgnoringDatePartForTimeValidation;\n  var date = utils.date(value);\n  var isAfterComparingFn = createIsAfterIgnoreDatePart(Boolean(disableIgnoringDatePartForTimeValidation), utils);\n\n  if (value === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(minTime && isAfterComparingFn(minTime, date)):\n      return 'minTime';\n\n    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):\n      return 'maxTime';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n\n    default:\n      return null;\n  }\n};\n\nvar isSameTimeError = function isSameTimeError(a, b) {\n  return a === b;\n};\n\nexport var useTimeValidation = function useTimeValidation(props) {\n  return useValidation(props, validateTime, isSameTimeError);\n};","map":{"version":3,"sources":["C:/Users/mohammed rafeeque/Desktop/sample/frontend/node_modules/@mui/lab/node_modules/@mui/x-date-pickers/internals/hooks/validation/useTimeValidation.js"],"names":["createIsAfterIgnoreDatePart","useValidation","validateTime","utils","value","minTime","maxTime","shouldDisableTime","disableIgnoringDatePartForTimeValidation","date","isAfterComparingFn","Boolean","isValid","getHours","getMinutes","getSeconds","isSameTimeError","a","b","useTimeValidation","props"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,wBAA5C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR,QAKtB;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,iBAEI,QAFJA,iBAEI;AAAA,MADJC,wCACI,QADJA,wCACI;AACJ,MAAMC,IAAI,GAAGN,KAAK,CAACM,IAAN,CAAWL,KAAX,CAAb;AACA,MAAMM,kBAAkB,GAAGV,2BAA2B,CAACW,OAAO,CAACH,wCAAD,CAAR,EAAoDL,KAApD,CAAtD;;AAEA,MAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,UAAQ,IAAR;AACE,SAAK,CAACD,KAAK,CAACS,OAAN,CAAcR,KAAd,CAAN;AACE,aAAO,aAAP;;AAEF,SAAKO,OAAO,CAACN,OAAO,IAAIK,kBAAkB,CAACL,OAAD,EAAUI,IAAV,CAA9B,CAAZ;AACE,aAAO,SAAP;;AAEF,SAAKE,OAAO,CAACL,OAAO,IAAII,kBAAkB,CAACD,IAAD,EAAOH,OAAP,CAA9B,CAAZ;AACE,aAAO,SAAP;;AAEF,SAAKK,OAAO,CAACJ,iBAAiB,IAAIA,iBAAiB,CAACJ,KAAK,CAACU,QAAN,CAAeJ,IAAf,CAAD,EAAuB,OAAvB,CAAvC,CAAZ;AACE,aAAO,yBAAP;;AAEF,SAAKE,OAAO,CAACJ,iBAAiB,IAAIA,iBAAiB,CAACJ,KAAK,CAACW,UAAN,CAAiBL,IAAjB,CAAD,EAAyB,SAAzB,CAAvC,CAAZ;AACE,aAAO,2BAAP;;AAEF,SAAKE,OAAO,CAACJ,iBAAiB,IAAIA,iBAAiB,CAACJ,KAAK,CAACY,UAAN,CAAiBN,IAAjB,CAAD,EAAyB,SAAzB,CAAvC,CAAZ;AACE,aAAO,2BAAP;;AAEF;AACE,aAAO,IAAP;AApBJ;AAsBD,CAnCM;;AAqCP,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,KAAKC,CAAhB;AAAA,CAAxB;;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,SAAInB,aAAa,CAACmB,KAAD,EAAQlB,YAAR,EAAsBc,eAAtB,CAAjB;AAAA,CAA/B","sourcesContent":["import { createIsAfterIgnoreDatePart } from '../../utils/time-utils';\nimport { useValidation } from './useValidation';\nexport const validateTime = (utils, value, {\n  minTime,\n  maxTime,\n  shouldDisableTime,\n  disableIgnoringDatePartForTimeValidation\n}) => {\n  const date = utils.date(value);\n  const isAfterComparingFn = createIsAfterIgnoreDatePart(Boolean(disableIgnoringDatePartForTimeValidation), utils);\n\n  if (value === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(minTime && isAfterComparingFn(minTime, date)):\n      return 'minTime';\n\n    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):\n      return 'maxTime';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n\n    default:\n      return null;\n  }\n};\n\nconst isSameTimeError = (a, b) => a === b;\n\nexport const useTimeValidation = props => useValidation(props, validateTime, isSameTimeError);"]},"metadata":{},"sourceType":"module"}